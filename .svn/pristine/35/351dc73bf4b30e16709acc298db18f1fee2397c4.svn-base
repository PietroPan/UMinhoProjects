-- | Este módulo define funções comuns da Tarefa 5 do trabalho prático.
import Graphics.Gloss
import Graphics.Gloss.Juicy
import Graphics.Gloss.Interface.Pure.Game
import Graphics.Gloss.Data.Picture
import Graphics.Gloss.Data.Color
import Graphics.Gloss.Data.Bitmap
import System.Random
import Data.Maybe
import Data.List
import Data.Char
import LI11819
import Tarefa1_2018li1g077
import Tarefa2_2018li1g077
import Tarefa0_2018li1g077
import Tarefa4_2018li1g077
import Tarefa6_2018li1g077

-- | Função principal da Tarefa 5.
--
-- __NB:__ Esta Tarefa é completamente livre. Deve utilizar a biblioteca <http://hackage.haskell.org/package/gloss gloss> para animar o jogo, e reutilizar __de forma completa__ as funções das tarefas anteriores.
-- | Este módulo define funções comuns da Tarefa 5 do trabalho prático.

-- | Função principal da Tarefa 5.
--
-- __NB:__ Esta Tarefa é completamente livre. Deve utilizar a biblioteca <http://hackage.haskell.org/package/gloss gloss> para animar o jogo, e reutilizar __de forma completa__ as funções das tarefas anteriores.

type EstadoMain = (Estado,Float,Int,Int,[Picture])

-- | Função para carregar as imagens

loadIMG :: IO[Picture]
loadIMG = do imgMenu0 <- loadJuicy "Images/maintitle.png"                --0
             imgMenu1 <- loadJuicy "Images/Tanksmenu3.png"               --1
             borda <- loadJuicy "Images/BlocoDestrutivel.png"            --2
             borda2 <- loadJuicy "Images/BI.png"                         --3
             borda3 <- loadJuicy "Images/BlocoVazio.png"                 --4
             disparo <- loadJuicy "Images/lazer1'.png"                   --5
             player0canon <- loadJuicy "Images/player0canon.png"         --6
             player1canon <- loadJuicy "Images/player1canon.png"         --7
             player2canon <- loadJuicy "Images/player2canon.png"         --8
             player3canon <- loadJuicy "Images/player3canon.png"         --9
             player0choque <- loadJuicy "Images/player0choque.png"       --10
             player1choque <- loadJuicy "Images/player1choque.png"       --11
             player2choque <- loadJuicy "Images/player2choque.png"       --12
             player3choque <- loadJuicy "Images/player3choque.png"       --13
             player0 <- loadJuicy "Images/player0'''.png"                --14
             player1 <- loadJuicy "Images/player1.png"                   --15
             player2 <- loadJuicy "Images/player2.png"                   --16
             player3 <- loadJuicy "Images/player3.png"                   --17
             mainmap01 <- loadJuicy "Images/MainTitle4.png"              --18
             mainmap02 <- loadJuicy "Images/MainTitle3.png"              --19
             player0laser <- loadJuicy "Images/player0laser.png"         --20
             player1laser <- loadJuicy "Images/player1laser.png"         --21
             player2laser <- loadJuicy "Images/player2laser.png"         --22
             player3laser <- loadJuicy "Images/player3laser.png"         --23
             background <- loadJuicy "Images/spacebackground4.png"       --24
             score <- loadJuicy "Images/score.png"                       --25
             zero <- loadJuicy "Images/0.png"                            --26
             one <- loadJuicy "Images/1.png"                             --27
             two <- loadJuicy "Images/2.png"                             --28
             three <- loadJuicy "Images/3.png"                           --29
             four <- loadJuicy "Images/4.png"                            --30
             five <- loadJuicy "Images/5.png"                            --31
             pause1 <- loadJuicy "Images/pause1.jpg"                     --32
             pause2 <- loadJuicy "Images/pause2.jpg"                     --33
             score2 <- loadJuicy "Images/score2.png"                     --34
             score3 <- loadJuicy "Images/score3.png"                     --35
             return (map fromJust [imgMenu0,imgMenu1,borda,borda2,borda3,disparo,player0canon,player1canon,player2canon,player3canon,player0choque,player1choque,player2choque,player3choque,player0,player1,player2,player3,mainmap01,mainmap02,player0laser,player1laser,player2laser,player3laser,background,score,zero,one,two,three,four,five,pause1,pause2,score2,score3])

-- | Cria o ecrã do jogo

disM :: Display
disM = InWindow "Space Wars" (1920,1080) (0,0)

-- | Dá o estado inicial do jogo

estadoInicial :: [Picture] -> EstadoMain
estadoInicial loadedIMG = ((Estado [] [] []),0,0,0,loadedIMG)

-- | Desenha o jogo dependendo do seu 'EstadoMain'

desenhaEstado :: EstadoMain -> Picture
desenhaEstado (s,0,_,_,pics) = (pics !! 0)
desenhaEstado (s,(0.1),_,_,pics) = (pics !! 19)
desenhaEstado (s,(0.2),_,_,pics) = (pics !! 18)
desenhaEstado (s,1,a,b,pics) = (Pictures ((pics !! 24):(Translate (-770) (-30) (pics !! 25)):[(Translate (-455) (400)(scale (1.4) (1.4) (Pictures (drawall (drawmap (s,1,a,b,pics) (0,0)) (drawplayers (s,1,a,b,pics) 0) (drawshots (s,1,a,b,pics))(concat (drawlasers (s,1,a,b,pics)))))))]++[(drawscore(drawnumboflives (s,1,a,b,pics) 0)(drawnumboflazers (s,1,a,b,pics) 0)(drawnumbofchoque (s,1,a,b,pics) 0))]++[(Translate 650 330 (text (show (div a 4))))]))
desenhaEstado (s,(2.1),_,_,pics) = (Translate 0 (-80) (pics !! 32))
desenhaEstado (s,(2.2),_,_,pics) = (Translate 0 (-80) (pics !! 33))

-- | Junta um conjunto de figuras

drawall :: [Picture] -> [Picture] -> [Picture] -> [Picture] -> [Picture]
drawall pics1 pics2 pics3 pics4 = pics1 ++ pics2 ++ pics3 ++ pics4

-- | Escolhe a imagem do choque a usar dependendo do jogador que o usou

escolhechoque :: Int -> [Picture] -> Picture
escolhechoque j pics = case j of 0 -> (pics !! 10)
                                 1 -> (pics !! 11)
                                 2 -> (pics !! 12)
                                 3 -> (pics !! 13)

-- | Escolhe a imagem do canhão a usar dependendo da sua direção e do jogador que o usou 

escolhecanhao :: Int -> Direcao -> [Picture] -> Picture
escolhecanhao j d pics = case j of 0 -> case d of C -> (pics !! 6)
                                                  D -> rotate 90(pics !! 6)
                                                  B -> rotate 180(pics !! 6)
                                                  E -> rotate 270(pics !! 6)
                                   1 -> case d of C -> (pics !! 7)
                                                  D -> rotate 90(pics !! 7)
                                                  B -> rotate 180(pics !! 7)
                                                  E -> rotate 270(pics !! 7)
                                   2 -> case d of C -> (pics !! 8)
                                                  D -> rotate 90(pics !! 8)
                                                  B -> rotate 180(pics !! 8)
                                                  E -> rotate 270(pics !! 8)
                                   3 -> case d of C -> (pics !! 9)
                                                  D -> rotate 90(pics !! 9)
                                                  B -> rotate 180(pics !! 9)
                                                  E -> rotate 270(pics !! 9)

-- | Escolhe a imagem do jogador a usar dependendo do seu indice na lista de jogadores e da sua direção

escolhejogador :: Int -> Direcao -> [Picture] -> Picture
escolhejogador x d pics = case x of 0 -> case d of C -> (pics !! 14)
                                                   D -> rotate 90(pics !! 14)
                                                   B -> rotate 180(pics !! 14)
                                                   E -> rotate 270(pics !! 14)
                                    1 -> case d of C -> (pics !! 15)
                                                   D -> rotate 90(pics !! 15)
                                                   B -> rotate 180(pics !! 15)
                                                   E -> rotate 270(pics !! 15)
                                    2 -> case d of C -> (pics !! 16)
                                                   D -> rotate 90(pics !! 16)
                                                   B -> rotate 180(pics !! 16)
                                                   E -> rotate 270(pics !! 16)
                                    3 -> case d of C -> (pics !! 17)
                                                   D -> rotate 90(pics !! 17)
                                                   B -> rotate 180(pics !! 17)
                                                   E -> rotate 270(pics !! 17)

-- | Escolhe a imagem do laser a usar dependendo da sua direção e do jogador que o usou

escolhelaser :: Int -> Direcao -> [Picture] -> Picture
escolhelaser x d pics = case x of 0 -> case d of C -> (pics !! 20)
                                                 D -> rotate 90(pics !! 20)
                                                 B -> rotate 180(pics !! 20)
                                                 E -> rotate 270(pics !! 20)
                                  1 -> case d of C -> (pics !! 21)
                                                 D -> rotate 90(pics !! 21)
                                                 B -> rotate 180(pics !! 21)
                                                 E -> rotate 270(pics !! 21)
                                  2 -> case d of C -> (pics !! 22)
                                                 D -> rotate 90(pics !! 22)
                                                 B -> rotate 180(pics !! 22)
                                                 E -> rotate 270(pics !! 22)
                                  3 -> case d of C -> (pics !! 23)
                                                 D -> rotate 90(pics !! 23)
                                                 B -> rotate 180(pics !! 23)
                                                 E -> rotate 270(pics !! 23)

drawscore :: [Picture] -> [Picture] -> [Picture] -> Picture
drawscore pics1 pics2 pics3 = Pictures((Translate (-920) (390) (Pictures pics1)):(Translate (-740) (335) (Pictures pics3)):[(Translate (-920) (290) (Pictures pics2))])

-- | Desenha o número de vidas dos 'Jogador'es

drawnumboflives :: EstadoMain -> Int -> [Picture]
drawnumboflives ((Estado _ [] _),1,_,_,_) _ = []
drawnumboflives ((Estado mp ((Jogador (x,y) d v l c):xs) ds),1,ab,ac,pics) a | (v == 0) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 26))): drawnumboflives ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                             | (v == 1) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 27))): drawnumboflives ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                             | (v == 2) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 28))): drawnumboflives ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                             | (v == 3) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 29))): drawnumboflives ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                             | (v == 4) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 30))): drawnumboflives ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                             | (v == 5) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 31))): drawnumboflives ((Estado mp xs ds),1,ab,ac,pics) (a+1)

-- | Desenha o número de lasers dos 'Jogador'es

drawnumboflazers :: EstadoMain -> Int -> [Picture]
drawnumboflazers ((Estado _ [] _),1,_,_,_) _ = []
drawnumboflazers ((Estado mp ((Jogador (x,y) d v l c):xs) ds),1,ab,ac,pics) a | (l == 0) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 26))): drawnumboflazers ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                              | (l == 1) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 27))): drawnumboflazers ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                              | (l == 2) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 28))): drawnumboflazers ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                              | (l == 3) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 29))): drawnumboflazers ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                              | (l == 4) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 30))): drawnumboflazers ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                              | (l == 5) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 31))): drawnumboflazers ((Estado mp xs ds),1,ab,ac,pics) (a+1)

-- | Desenha o número de choques dos 'Jogador'es

drawnumbofchoque :: EstadoMain -> Int -> [Picture]
drawnumbofchoque ((Estado _ [] _),1,_,_,_) _ = []
drawnumbofchoque ((Estado mp ((Jogador (x,y) d v l c):xs) ds),1,ab,ac,pics) a | (c == 0) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 26))): drawnumbofchoque ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                              | (c == 1) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 27))): drawnumbofchoque ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                              | (c == 2) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 28))): drawnumbofchoque ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                              | (c == 3) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 29))): drawnumbofchoque ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                              | (c == 4) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 30))): drawnumbofchoque ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                              | (c == 5) = (Translate 0 (fromIntegral (a*(-240))) (scale (0.4) (0.4) (pics !! 31))): drawnumbofchoque ((Estado mp xs ds),1,ab,ac,pics) (a+1)

-- | Desenha o 'Mapa'

drawmap :: EstadoMain -> Posicao -> [Picture]
drawmap ((Estado [] _ _),1,_,_,_) _ = []
drawmap ((Estado ([]:xs) jd ds),1,a,b,loadedIMG) (x,y) = drawmap ((Estado xs jd ds),1,a,b,loadedIMG) (0,(y+1))
drawmap ((Estado ((x1:x2):xs) jd ds),1,a,b,loadedIMG) (x,y) | (x1 == Bloco Destrutivel) = (Translate (fromIntegral(x*30)) (fromIntegral(y*(-30))) (loadedIMG !! 2)): (drawmap ((Estado (x2:xs) jd ds),1,a,b,loadedIMG) (x+1,y))
                                                            | (x1 == Bloco Indestrutivel) = (Translate (fromIntegral(x*30)) (fromIntegral(y*(-30))) (loadedIMG !! 3)): (drawmap ((Estado (x2:xs) jd ds),1,a,b,loadedIMG) (x+1,y))
                                                            | (x1 == Vazia) = (drawmap ((Estado (x2:xs) jd ds),1,a,b,loadedIMG) (x+1,y))

-- | Desenha os 'DisparoCanhao' e 'DiparoChoque'

drawshots :: EstadoMain -> [Picture]
drawshots ((Estado _ _ []),1,_,_,_) = []
drawshots ((Estado mp jd ((DisparoCanhao j (x,y) d):xs)),1,a,b,loadedIMG) = (Translate ((fromIntegral(y*30)+15)) (fromIntegral(x*(-30))+(-15)) (escolhecanhao j d loadedIMG)):drawshots ((Estado mp jd xs),1,a,b,loadedIMG)
drawshots ((Estado mp jd ((DisparoChoque j time):xs)),1,a,b,loadedIMG) = (Translate (fromIntegral (y*30)+15) (fromIntegral (x*(-30))+(-15)) (escolhechoque j loadedIMG)):drawshots ((Estado mp jd xs),1,a,b,loadedIMG)
    where (x,y) = case j of 0 -> posicaoJogador (jd !! 0)
                            1 -> posicaoJogador (jd !! 1)
                            2 -> posicaoJogador (jd !! 2)
                            3 -> posicaoJogador (jd !! 3)
drawshots ((Estado mp jd (_:xs)),1,a,b,loadedIMG) = drawshots ((Estado mp jd xs),1,a,b,loadedIMG)

-- | Desenha todos os 'DisparoLaser'

drawlasers :: EstadoMain -> [[Picture]]
drawlasers ((Estado _ _ []),1,_,_,_) = []
drawlasers ((Estado mp jd ((DisparoLaser j (x,y) d):xs)),1,a,b,loadedIMG) = (drawonelaser j d (posicoesLaser (x,y) d mp) loadedIMG):(drawlasers ((Estado mp jd xs),1,a,b,loadedIMG))
drawlasers ((Estado mp jd (_:xs)),1,a,b,loadedIMG) = drawlasers ((Estado mp jd xs),1,a,b,loadedIMG)

-- | Desenha um 'DisparoLaser'

drawonelaser :: Int -> Direcao -> [PosicaoGrelha] -> [Picture] -> [Picture]
drawonelaser _ _ [] _ = []
drawonelaser j d ((x,y):xs) pics = (Translate ((fromIntegral(y*30)+15)) (fromIntegral(x*(-30))+(-15)) (escolhelaser j d pics)):(drawonelaser j d xs pics)

-- | Encontra as posições afetadas por um 'DisparoLaser'

posicoesLaser :: PosicaoGrelha -> Direcao -> Mapa -> [PosicaoGrelha]
posicoesLaser (x,y) C mp |(((encontraPosicaoMatriz (x,y) mp) == (Bloco Indestrutivel)) || ((encontraPosicaoMatriz (x,(y+1)) mp) == (Bloco Indestrutivel))) = []
                         | otherwise = ((x,y):(posicoesLaser ((x-1),y) C mp))
posicoesLaser (x,y) D mp |(((encontraPosicaoMatriz (x,(y+1)) mp) == (Bloco Indestrutivel)) || ((encontraPosicaoMatriz ((x+1),(y+1)) mp) == (Bloco Indestrutivel))) = []
                         | otherwise = ((x,y):(posicoesLaser (x,(y+1)) D mp))
posicoesLaser (x,y) B mp |(((encontraPosicaoMatriz ((x+1),y) mp) == (Bloco Indestrutivel)) || ((encontraPosicaoMatriz ((x+1),(y+1)) mp) == (Bloco Indestrutivel))) = []
                         | otherwise = ((x,y):(posicoesLaser ((x+1),y) B mp))
posicoesLaser (x,y) E mp |(((encontraPosicaoMatriz (x,y) mp) == (Bloco Indestrutivel)) || ((encontraPosicaoMatriz ((x+1),y) mp) == (Bloco Indestrutivel))) = []
                         | otherwise = ((x,y):(posicoesLaser (x,(y-1)) E mp))

-- | Desenha os 'Joagadore's

drawplayers :: EstadoMain -> Int -> [Picture]
drawplayers ((Estado _ [] _),1,_,_,_) _ = []
drawplayers ((Estado mp ((Jogador (x,y) d v l c):xs) ds),1,ab,ac,pics) a | (v /= 0) = (Translate (fromIntegral (y*30)+15) (fromIntegral (x*(-30))+(-15)) (escolhejogador a d pics)): drawplayers ((Estado mp xs ds),1,ab,ac,pics) (a+1)
                                                                         | otherwise = drawplayers ((Estado mp xs ds),1,ab,ac,pics) (a+1)

-- | Altera o 'EstadoMain' de acordo com a tecla pressionada e o o tipo de estado atual

eventChange :: Event -> EstadoMain -> EstadoMain
eventChange (EventKey a Down _ _) (s,1,c,b,pics) = case a of (SpecialKey KeyUp) -> ((jogada 1 (Movimenta C) s),1,c,b,pics)
                                                             (SpecialKey KeyDown) -> ((jogada 1 (Movimenta B) s),1,c,b,pics)
                                                             (SpecialKey KeyLeft) -> ((jogada 1 (Movimenta E) s),1,c,b,pics)
                                                             (SpecialKey KeyRight) -> ((jogada 1 (Movimenta D) s),1,c,b,pics)
                                                             (Char '3') -> ((jogada 0 (Dispara Choque) s),1,c,b,pics)
                                                             (Char '2') -> ((jogada 0 (Dispara Laser) s),1,c,b,pics)
                                                             (Char '1') -> ((jogada 0 (Dispara Canhao) s),1,c,b,pics)
                                                             (Char '7') -> ((jogada 3 (Dispara Canhao) s),1,c,b,pics)
                                                             (Char '4') -> ((jogada 2 (Dispara Canhao) s),1,c,b,pics)
                                                             (Char '.') -> ((jogada 1 (Dispara Laser) s),1,c,b,pics)
                                                             (Char ',') -> ((jogada 1 (Dispara Canhao) s),1,c,b,pics)
                                                             (Char '5') -> ((jogada 2 (Dispara Laser)s),1,c,b,pics)
                                                             (Char '8') -> ((jogada 3 (Dispara Laser)s),1,c,b,pics)
                                                             (Char '-') -> ((jogada 1 (Dispara Choque) s),1,c,b,pics)
                                                             (Char '6') -> ((jogada 2 (Dispara Choque) s),1,c,b,pics)
                                                             (Char '9') -> ((jogada 3 (Dispara Choque) s),1,c,b,pics)
                                                             (Char 'w') -> ((jogada 0 (Movimenta C) s),1,c,b,pics)
                                                             (Char 's') -> ((jogada 0 (Movimenta B) s),1,c,b,pics)
                                                             (Char 'a') -> ((jogada 0 (Movimenta E) s),1,c,b,pics)
                                                             (Char 'd') -> ((jogada 0 (Movimenta D) s),1,c,b,pics)
                                                             (Char 't') -> ((jogada 2 (Movimenta C) s),1,c,b,pics)
                                                             (Char 'g') -> ((jogada 2 (Movimenta B) s),1,c,b,pics)
                                                             (Char 'f') -> ((jogada 2 (Movimenta E) s),1,c,b,pics)
                                                             (Char 'h') -> ((jogada 2 (Movimenta D) s),1,c,b,pics)
                                                             (Char 'i') -> ((jogada 3 (Movimenta C) s),1,c,b,pics)
                                                             (Char 'k') -> ((jogada 3 (Movimenta B) s),1,c,b,pics)
                                                             (Char 'j') -> ((jogada 3 (Movimenta E) s),1,c,b,pics)
                                                             (Char 'l') -> ((jogada 3 (Movimenta D) s),1,c,b,pics)
                                                             (Char 'p') -> (s,(2.1),c,b,pics)
                                                             (SpecialKey KeySpace) | (b == 1) -> ((Estado [[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi],[bi,bi,v,v,v,v,v,v,v,bi,bi,v,v,v,v,v,v,v,bi,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,bi,bi,bi,bi,bd,bd,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,v,bi,bi,v,v,bi,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,v,bi,bi,v,v,bi,v,v,v,v,v,bi],[bi,bi,bd,bd,bd,bd,bi,bi,bi,v,v,bi,bi,bi,bd,bd,bd,bd,bi,bi],[bi,bi,bd,bd,bd,bd,bi,bi,bi,v,v,bi,bi,bi,bd,bd,bd,bd,bi,bi],[bi,v,v,v,v,v,bi,v,v,bi,bi,v,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,bi,v,v,bi,bi,v,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,bd,bd,bi,bi,bi,bi,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,bi,v,v,v,v,v,v,v,bi,bi,v,v,v,v,v,v,v,bi,bi],[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi]] [(Jogador (7,7) E 5 5 5),(Jogador (7,11) C 5 5 5),(Jogador (11,7) B 5 5 5),(Jogador (11,11) D 5 5 5)] []),1,0,b,pics)
                                                                                   | (b == 2) -> ((Estado [[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi],[bi,v,v,v,v,bd,v,v,bi,v,v,bi,v,v,bd,v,v,v,v,bi],[bi,v,v,v,bd,v,v,v,bi,v,v,bi,v,v,v,bd,v,v,v,bi],[bi,v,v,bd,v,v,v,v,v,bd,bd,v,v,v,v,v,bd,v,v,bi],[bi,v,bd,v,bd,v,v,v,bd,v,v,bd,v,v,v,bd,v,bd,v,bi],[bi,bd,v,v,v,bd,v,bd,bi,v,v,bi,bd,v,bd,v,v,v,bd,bi],[bi,v,v,v,v,v,bd,v,bi,v,v,bi,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,bd,v,bd,v,v,v,v,bd,v,bd,v,v,v,v,bi],[bi,bi,bi,v,bd,bi,bi,v,bd,v,v,bd,v,bi,bi,bd,v,bi,bi,bi],[bi,v,v,bd,v,v,v,v,v,bd,bd,v,v,v,v,v,bd,v,v,bi],[bi,v,v,bd,v,v,v,v,v,bd,bd,v,v,v,v,v,bd,v,v,bi],[bi,bi,bi,v,bd,bi,bi,v,bd,v,v,bd,v,bi,bi,bd,v,bi,bi,bi],[bi,v,v,v,v,bd,v,bd,v,v,v,v,bd,v,bd,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,bi,v,v,bi,v,bd,v,v,v,v,v,bi],[bi,bd,v,v,v,bd,v,bd,bi,v,v,bi,bd,v,bd,v,v,v,bd,bi],[bi,v,bd,v,bd,v,v,v,bd,v,v,bd,v,v,v,bd,v,bd,v,bi],[bi,v,v,bd,v,v,v,v,v,bd,bd,v,v,v,v,v,bd,v,v,bi],[bi,v,v,v,bd,v,v,v,bi,v,v,bi,v,v,v,bd,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bi,v,v,bi,v,v,bd,v,v,v,v,bi],[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi]] [(Jogador (1,1) D 5 5 5),(Jogador (1,17) B 5 5 5),(Jogador (17,1) C 5 5 5),(Jogador (17,17) E 5 5 5)] []),1,0,b,pics) 
                                                                                   | (b == 3) -> ((Estado [[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi],[bi,v,v,v,v,v,v,v,v,v,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,v,bi,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,v,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bi,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,bd,v,bd,bd,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,v,bi,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,bd,bd,bd,bd,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bd,v,v,bd,v,v,bd,v,v,v,v,bi],[bi,bd,bi,bd,bi,bd,bi,bd,bi,v,v,bd,v,v,v,bd,v,v,v,bi],[bi,v,v,v,bd,v,v,v,bd,v,v,bi,bd,bi,bd,bi,bd,bi,bd,bi],[bi,v,v,v,v,bd,v,v,bd,v,v,bd,v,v,bd,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,bd,bd,bd,bd,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,bi,v,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,bd,bd,v,bd,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bi,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,v,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bi,v,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bi,v,v,v,v,v,v,v,v,v,bi],[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi]] [(Jogador (1,1) D 5 5 5),(Jogador (1,17) B 5 5 5),(Jogador (17,1) C 5 5 5),(Jogador (17,17) E 5 5 5)] []),1,0,b,pics)
                                                                                   | (b == 4) -> ((Estado [[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi],[bi,v,bi,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,bi,v,bi],[bi,bi,v,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,v,bi,bi],[bi,v,v,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,bi],[bi,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,bi],[bi,bd,bd,bd,bi,bi,v,bi,v,v,v,v,bi,v,bi,bi,bd,bd,bd,bi],[bi,v,v,v,v,v,bi,bi,v,v,v,v,bi,bi,v,v,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bd,bd,bd,bd,v,v,bd,v,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bd,v,v,bd,v,v,bd,v,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bd,v,v,bd,v,v,bd,v,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bd,bd,bd,bd,v,v,bd,v,v,v,v,bi],[bi,v,v,v,v,v,bi,bi,v,v,v,v,bi,bi,v,v,v,v,v,bi],[bi,bd,bd,bd,bi,bi,v,bi,v,v,v,v,bi,v,bi,bi,bd,bd,bd,bi],[bi,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,bi],[bi,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,v,v,bi],[bi,bi,v,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,v,bi,bi],[bi,bi,v,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,v,bi,bi],[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi]] [(Jogador (4,4) C 5 5 5),(Jogador (4,14) C 5 5 5),(Jogador (14,4) B 5 5 5),(Jogador (14,14) B 5 5 5)] []),1,0,b,pics)
                                                                                   | (b == 5) -> ((Estado [[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi],[bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi],[bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,v,bi,bi,v,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,v,bi,bi,v,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi],[bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi],[bi,bi,bi,bd,bd,bi,bi,bi,v,v,v,v,v,v,bi,bi,bi,bd,bd,bi,bi,bi],[bi,bd,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,bd,bi],[bi,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,bi],[bi,v,v,bi,bi,v,v,v,v,v,bd,bd,v,v,v,v,v,bi,bi,v,v,bi],[bi,v,v,bi,bi,v,v,v,v,v,bd,bd,v,v,v,v,v,bi,bi,v,v,bi],[bi,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,bi],[bi,bd,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,bd,bi],[bi,bi,bi,bd,bd,bi,bi,bi,v,v,v,v,v,v,bi,bi,bi,bd,bd,bi,bi,bi],[bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi],[bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,v,bi,bi,v,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,v,bi,bi,v,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi],[bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi],[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi]] [(Jogador (3,3) D 5 5 5),(Jogador (3,17) B 5 5 5),(Jogador (17,3) C 5 5 5),(Jogador (17,17) E 5 5 5)] []),1,0,b,pics)
                                                                                   where bi=Bloco Indestrutivel   
                                                                                         bd=Bloco Destrutivel
                                                                                         v=Vazia
                                                             (Char 'm') | (b == 1) -> ((Estado [[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi],[bi,v,v,v,v,bd,v,v,bi,v,v,bi,v,v,bd,v,v,v,v,bi],[bi,v,v,v,bd,v,v,v,bi,v,v,bi,v,v,v,bd,v,v,v,bi],[bi,v,v,bd,v,v,v,v,v,bd,bd,v,v,v,v,v,bd,v,v,bi],[bi,v,bd,v,bd,v,v,v,bd,v,v,bd,v,v,v,bd,v,bd,v,bi],[bi,bd,v,v,v,bd,v,bd,bi,v,v,bi,bd,v,bd,v,v,v,bd,bi],[bi,v,v,v,v,v,bd,v,bi,v,v,bi,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,bd,v,bd,v,v,v,v,bd,v,bd,v,v,v,v,bi],[bi,bi,bi,v,bd,bi,bi,v,bd,v,v,bd,v,bi,bi,bd,v,bi,bi,bi],[bi,v,v,bd,v,v,v,v,v,bd,bd,v,v,v,v,v,bd,v,v,bi],[bi,v,v,bd,v,v,v,v,v,bd,bd,v,v,v,v,v,bd,v,v,bi],[bi,bi,bi,v,bd,bi,bi,v,bd,v,v,bd,v,bi,bi,bd,v,bi,bi,bi],[bi,v,v,v,v,bd,v,bd,v,v,v,v,bd,v,bd,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,bi,v,v,bi,v,bd,v,v,v,v,v,bi],[bi,bd,v,v,v,bd,v,bd,bi,v,v,bi,bd,v,bd,v,v,v,bd,bi],[bi,v,bd,v,bd,v,v,v,bd,v,v,bd,v,v,v,bd,v,bd,v,bi],[bi,v,v,bd,v,v,v,v,v,bd,bd,v,v,v,v,v,bd,v,v,bi],[bi,v,v,v,bd,v,v,v,bi,v,v,bi,v,v,v,bd,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bi,v,v,bi,v,v,bd,v,v,v,v,bi],[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi]] [(Jogador (1,1) D 5 5 5),(Jogador (1,17) B 5 5 5),(Jogador (17,1) C 5 5 5),(Jogador (17,17) E 5 5 5)] []),1,0,(b+1),pics)
                                                                        | (b == 2) -> ((Estado [[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi],[bi,v,v,v,v,v,v,v,v,v,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,v,bi,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,v,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bi,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,bd,v,bd,bd,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,v,bi,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,bd,bd,bd,bd,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bd,v,v,bd,v,v,bd,v,v,v,v,bi],[bi,bd,bi,bd,bi,bd,bi,bd,bi,v,v,bd,v,v,v,bd,v,v,v,bi],[bi,v,v,v,bd,v,v,v,bd,v,v,bi,bd,bi,bd,bi,bd,bi,bd,bi],[bi,v,v,v,v,bd,v,v,bd,v,v,bd,v,v,bd,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,bd,bd,bd,bd,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,bi,v,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,bd,bd,v,bd,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bi,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,v,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bi,v,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bi,v,v,v,v,v,v,v,v,v,bi],[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi]] [(Jogador (1,1) D 5 5 5),(Jogador (1,17) B 5 5 5),(Jogador (17,1) C 5 5 5),(Jogador (17,17) E 5 5 5)] []),1,0,(b+1),pics)
                                                                        | (b == 3) -> ((Estado [[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi],[bi,v,bi,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,bi,v,bi],[bi,bi,v,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,v,bi,bi],[bi,v,v,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,bi],[bi,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,bi],[bi,bd,bd,bd,bi,bi,v,bi,v,v,v,v,bi,v,bi,bi,bd,bd,bd,bi],[bi,v,v,v,v,v,bi,bi,v,v,v,v,bi,bi,v,v,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bd,bd,bd,bd,v,v,bd,v,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bd,v,v,bd,v,v,bd,v,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bd,v,v,bd,v,v,bd,v,v,v,v,bi],[bi,v,v,v,v,bd,v,v,bd,bd,bd,bd,v,v,bd,v,v,v,v,bi],[bi,v,v,v,v,v,bi,bi,v,v,v,v,bi,bi,v,v,v,v,v,bi],[bi,bd,bd,bd,bi,bi,v,bi,v,v,v,v,bi,v,bi,bi,bd,bd,bd,bi],[bi,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,bi],[bi,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,v,v,bi],[bi,bi,v,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,v,bi,bi],[bi,bi,v,v,v,v,bd,v,v,v,v,v,v,bd,v,v,v,v,bi,bi],[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi]] [(Jogador (4,4) C 5 5 5),(Jogador (4,14) C 5 5 5),(Jogador (14,4) B 5 5 5),(Jogador (14,14) B 5 5 5)] []),1,0,(b+1),pics)
                                                                        | (b == 4) -> ((Estado [[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi],[bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi],[bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,v,bi,bi,v,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,v,bi,bi,v,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi],[bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi],[bi,bi,bi,bd,bd,bi,bi,bi,v,v,v,v,v,v,bi,bi,bi,bd,bd,bi,bi,bi],[bi,bd,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,bd,bi],[bi,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,bi],[bi,v,v,bi,bi,v,v,v,v,v,bd,bd,v,v,v,v,v,bi,bi,v,v,bi],[bi,v,v,bi,bi,v,v,v,v,v,bd,bd,v,v,v,v,v,bi,bi,v,v,bi],[bi,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,bi],[bi,bd,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,bd,bi],[bi,bi,bi,bd,bd,bi,bi,bi,v,v,v,v,v,v,bi,bi,bi,bd,bd,bi,bi,bi],[bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi],[bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,v,bi,bi,v,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bd,v,v,bi,bi,v,v,bd,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi,v,v,v,v,v,v,bi],[bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi,bd,v,v,v,v,bd,bi],[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi]] [(Jogador (3,3) D 5 5 5),(Jogador (3,17) B 5 5 5),(Jogador (17,3) C 5 5 5),(Jogador (17,17) E 5 5 5)] []),1,0,(b+1),pics)
                                                                        | otherwise -> ((Estado [[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi],[bi,bi,v,v,v,v,v,v,v,bi,bi,v,v,v,v,v,v,v,bi,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,bi,bi,bi,bi,bd,bd,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,v,bi,bi,v,v,bi,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,v,v,bi,bi,v,v,bi,v,v,v,v,v,bi],[bi,bi,bd,bd,bd,bd,bi,bi,bi,v,v,bi,bi,bi,bd,bd,bd,bd,bi,bi],[bi,bi,bd,bd,bd,bd,bi,bi,bi,v,v,bi,bi,bi,bd,bd,bd,bd,bi,bi],[bi,v,v,v,v,v,bi,v,v,bi,bi,v,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,bi,v,v,bi,bi,v,v,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,bd,bd,bd,bi,bi,bi,bi,bd,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,v,v,v,v,v,v,v,v,bd,bd,v,v,v,v,v,v,v,v,bi],[bi,bi,v,v,v,v,v,v,v,bi,bi,v,v,v,v,v,v,v,bi,bi],[bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi,bi]] [(Jogador (7,7) E 5 5 5),(Jogador (7,11) B 5 5 5),(Jogador (11,7) C 5 5 5),(Jogador (11,11) D 5 5 5)] []),1,0,1,pics) 
                                                                         where bi=Bloco Indestrutivel   
                                                                               bd=Bloco Destrutivel
                                                                               v=Vazia
                                                             _ -> (s,1,c,b,pics)
eventChange (EventKey (SpecialKey KeyLeft) Down _ _) (s,a,b,c,pics) | a < 1 = (s,(0.1),b,c,pics)
                                                                | ((a > 2) && (a < 3)) = (s,(2.1),b,c,pics)
eventChange (EventKey (SpecialKey KeyRight) Down _ _) (s,a,b,c,pics) | a < 1 = (s,(0.2),b,c,pics)
                                                                 | ((a >2) && (a < 3)) = (s,(2.2),b,c,pics)
eventChange (EventKey (SpecialKey KeyEnter) Down _ _) (s,(0.1),b,c,pics) = ((Estado (mapaInicial (20,20)) [(Jogador (1,1) E 5 5 5),(Jogador (1,17) C 5 5 5),(Jogador (17,1) B 5 5 5),(Jogador (17,17) D 5 5 5)] []),1,b,(c+1),pics)
    where bi=Bloco Indestrutivel   
          bd=Bloco Destrutivel
          v=Vazia
eventChange (EventKey (SpecialKey KeyEnter) Down _ _) (s,(2.2),a,b,pics) = (s,0,a,b,pics)
eventChange (EventKey (SpecialKey KeyEnter) Down _ _) (s,(2.1),a,b,pics) = (s,1,a,b,pics)
eventChange _ s = s

ply :: Estado -> Estado
ply s = (jogada 2 (fromJust(bot 2 s)) s)

plx :: Estado -> Estado
plx s = (jogada 3 (fromJust(bot 3 s)) s)

plz :: Estado -> Estado
plz s = (jogada 0 (fromJust(bot 0 s)) s)

-- | Alera o estado a cada frame

timeChange :: Float -> EstadoMain -> EstadoMain
timeChange f ((Estado a b c),1,d,e,g) = (tick(plz(plx(ply(Estado a b c)))),1,(d+1),e,g)
timeChange f s = s

-- | Cria o jogo

main :: IO()
main = do loadedIMG <- loadIMG
          play disM
               black
               4
               (estadoInicial loadedIMG)
               desenhaEstado
               eventChange
               timeChange
